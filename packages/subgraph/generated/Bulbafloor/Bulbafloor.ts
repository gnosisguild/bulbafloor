// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AuctionCancelled extends ethereum.Event {
  get params(): AuctionCancelled__Params {
    return new AuctionCancelled__Params(this);
  }
}

export class AuctionCancelled__Params {
  _event: AuctionCancelled;

  constructor(event: AuctionCancelled) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenContract(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class AuctionCreated extends ethereum.Event {
  get params(): AuctionCreated__Params {
    return new AuctionCreated__Params(this);
  }
}

export class AuctionCreated__Params {
  _event: AuctionCreated;

  constructor(event: AuctionCreated) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get auction(): AuctionCreatedAuctionStruct {
    return changetype<AuctionCreatedAuctionStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }

  get seller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenContract(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class AuctionCreatedAuctionStruct extends ethereum.Tuple {
  get token(): AuctionCreatedAuctionTokenStruct {
    return changetype<AuctionCreatedAuctionTokenStruct>(this[0].toTuple());
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get saleToken(): Address {
    return this[2].toAddress();
  }

  get seller(): Address {
    return this[3].toAddress();
  }

  get startPrice(): BigInt {
    return this[4].toBigInt();
  }

  get reservePrice(): BigInt {
    return this[5].toBigInt();
  }

  get feeRecipient(): Address {
    return this[6].toAddress();
  }

  get feeBasisPoints(): i32 {
    return this[7].toI32();
  }

  get royaltyRecipient(): Address {
    return this[8].toAddress();
  }

  get royaltyBasisPoints(): i32 {
    return this[9].toI32();
  }

  get duration(): BigInt {
    return this[10].toBigInt();
  }

  get startTime(): BigInt {
    return this[11].toBigInt();
  }
}

export class AuctionCreatedAuctionTokenStruct extends ethereum.Tuple {
  get tokenContract(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get tokenType(): i32 {
    return this[2].toI32();
  }
}

export class AuctionSuccessful extends ethereum.Event {
  get params(): AuctionSuccessful__Params {
    return new AuctionSuccessful__Params(this);
  }
}

export class AuctionSuccessful__Params {
  _event: AuctionSuccessful;

  constructor(event: AuctionSuccessful) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get buyer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get royalty(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class FeeBasisPointsSet extends ethereum.Event {
  get params(): FeeBasisPointsSet__Params {
    return new FeeBasisPointsSet__Params(this);
  }
}

export class FeeBasisPointsSet__Params {
  _event: FeeBasisPointsSet;

  constructor(event: FeeBasisPointsSet) {
    this._event = event;
  }

  get feeBasisPoints(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class FeeRecipientSet extends ethereum.Event {
  get params(): FeeRecipientSet__Params {
    return new FeeRecipientSet__Params(this);
  }
}

export class FeeRecipientSet__Params {
  _event: FeeRecipientSet;

  constructor(event: FeeRecipientSet) {
    this._event = event;
  }

  get feeRecipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Initialized1 extends ethereum.Event {
  get params(): Initialized1__Params {
    return new Initialized1__Params(this);
  }
}

export class Initialized1__Params {
  _event: Initialized1;

  constructor(event: Initialized1) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get feeBasisPoints(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get feeRecipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Bulbafloor__auctionsResultTokenStruct extends ethereum.Tuple {
  get tokenContract(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get tokenType(): i32 {
    return this[2].toI32();
  }
}

export class Bulbafloor__auctionsResult {
  value0: Bulbafloor__auctionsResultTokenStruct;
  value1: BigInt;
  value2: Address;
  value3: Address;
  value4: BigInt;
  value5: BigInt;
  value6: Address;
  value7: i32;
  value8: Address;
  value9: i32;
  value10: BigInt;
  value11: BigInt;

  constructor(
    value0: Bulbafloor__auctionsResultTokenStruct,
    value1: BigInt,
    value2: Address,
    value3: Address,
    value4: BigInt,
    value5: BigInt,
    value6: Address,
    value7: i32,
    value8: Address,
    value9: i32,
    value10: BigInt,
    value11: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromAddress(this.value6));
    map.set(
      "value7",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value7))
    );
    map.set("value8", ethereum.Value.fromAddress(this.value8));
    map.set(
      "value9",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value9))
    );
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    map.set("value11", ethereum.Value.fromUnsignedBigInt(this.value11));
    return map;
  }

  getToken(): Bulbafloor__auctionsResultTokenStruct {
    return this.value0;
  }

  getAmount(): BigInt {
    return this.value1;
  }

  getSaleToken(): Address {
    return this.value2;
  }

  getSeller(): Address {
    return this.value3;
  }

  getStartPrice(): BigInt {
    return this.value4;
  }

  getReservePrice(): BigInt {
    return this.value5;
  }

  getFeeRecipient(): Address {
    return this.value6;
  }

  getFeeBasisPoints(): i32 {
    return this.value7;
  }

  getRoyaltyRecipient(): Address {
    return this.value8;
  }

  getRoyaltyBasisPoints(): i32 {
    return this.value9;
  }

  getDuration(): BigInt {
    return this.value10;
  }

  getStartTime(): BigInt {
    return this.value11;
  }
}

export class Bulbafloor__getAuctionResultTokenStruct extends ethereum.Tuple {
  get tokenContract(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get tokenType(): i32 {
    return this[2].toI32();
  }
}

export class Bulbafloor__getAuctionResult {
  value0: Bulbafloor__getAuctionResultTokenStruct;
  value1: BigInt;
  value2: Address;
  value3: Address;
  value4: BigInt;
  value5: BigInt;
  value6: i32;
  value7: Address;
  value8: i32;
  value9: BigInt;
  value10: BigInt;

  constructor(
    value0: Bulbafloor__getAuctionResultTokenStruct,
    value1: BigInt,
    value2: Address,
    value3: Address,
    value4: BigInt,
    value5: BigInt,
    value6: i32,
    value7: Address,
    value8: i32,
    value9: BigInt,
    value10: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6))
    );
    map.set("value7", ethereum.Value.fromAddress(this.value7));
    map.set(
      "value8",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value8))
    );
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    return map;
  }

  getToken(): Bulbafloor__getAuctionResultTokenStruct {
    return this.value0;
  }

  getAmount(): BigInt {
    return this.value1;
  }

  getSaleToken(): Address {
    return this.value2;
  }

  getSeller(): Address {
    return this.value3;
  }

  getStartPrice(): BigInt {
    return this.value4;
  }

  getReservePrice(): BigInt {
    return this.value5;
  }

  get_feeBasisPoints(): i32 {
    return this.value6;
  }

  getRoyaltyRecipient(): Address {
    return this.value7;
  }

  getRoyaltyBasisPoints(): i32 {
    return this.value8;
  }

  getDuration(): BigInt {
    return this.value9;
  }

  getStartTime(): BigInt {
    return this.value10;
  }
}

export class Bulbafloor__getCurrentPriceResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Bulbafloor extends ethereum.SmartContract {
  static bind(address: Address): Bulbafloor {
    return new Bulbafloor("Bulbafloor", address);
  }

  DENOMINATOR(): i32 {
    let result = super.call("DENOMINATOR", "DENOMINATOR():(uint16)", []);

    return result[0].toI32();
  }

  try_DENOMINATOR(): ethereum.CallResult<i32> {
    let result = super.tryCall("DENOMINATOR", "DENOMINATOR():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  auctions(auctionId: BigInt): Bulbafloor__auctionsResult {
    let result = super.call(
      "auctions",
      "auctions(uint256):((address,uint256,uint8),uint256,address,address,uint256,uint256,address,uint16,address,uint16,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(auctionId)]
    );

    return changetype<Bulbafloor__auctionsResult>(
      new Bulbafloor__auctionsResult(
        changetype<Bulbafloor__auctionsResultTokenStruct>(result[0].toTuple()),
        result[1].toBigInt(),
        result[2].toAddress(),
        result[3].toAddress(),
        result[4].toBigInt(),
        result[5].toBigInt(),
        result[6].toAddress(),
        result[7].toI32(),
        result[8].toAddress(),
        result[9].toI32(),
        result[10].toBigInt(),
        result[11].toBigInt()
      )
    );
  }

  try_auctions(
    auctionId: BigInt
  ): ethereum.CallResult<Bulbafloor__auctionsResult> {
    let result = super.tryCall(
      "auctions",
      "auctions(uint256):((address,uint256,uint8),uint256,address,address,uint256,uint256,address,uint16,address,uint16,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(auctionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Bulbafloor__auctionsResult>(
        new Bulbafloor__auctionsResult(
          changetype<Bulbafloor__auctionsResultTokenStruct>(value[0].toTuple()),
          value[1].toBigInt(),
          value[2].toAddress(),
          value[3].toAddress(),
          value[4].toBigInt(),
          value[5].toBigInt(),
          value[6].toAddress(),
          value[7].toI32(),
          value[8].toAddress(),
          value[9].toI32(),
          value[10].toBigInt(),
          value[11].toBigInt()
        )
      )
    );
  }

  checkAuction(auctionId: BigInt): BigInt {
    let result = super.call("checkAuction", "checkAuction(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(auctionId)
    ]);

    return result[0].toBigInt();
  }

  try_checkAuction(auctionId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "checkAuction",
      "checkAuction(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(auctionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createAuction(
    tokenContract: Address,
    tokenId: BigInt,
    tokenType: i32,
    amount: BigInt,
    saleToken: Address,
    startPrice: BigInt,
    reservePrice: BigInt,
    royaltyRecipient: Address,
    royaltyBasisPoints: i32,
    duration: BigInt
  ): BigInt {
    let result = super.call(
      "createAuction",
      "createAuction(address,uint256,uint8,uint256,address,uint256,uint256,address,uint16,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenContract),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tokenType)),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(saleToken),
        ethereum.Value.fromUnsignedBigInt(startPrice),
        ethereum.Value.fromUnsignedBigInt(reservePrice),
        ethereum.Value.fromAddress(royaltyRecipient),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(royaltyBasisPoints)),
        ethereum.Value.fromUnsignedBigInt(duration)
      ]
    );

    return result[0].toBigInt();
  }

  try_createAuction(
    tokenContract: Address,
    tokenId: BigInt,
    tokenType: i32,
    amount: BigInt,
    saleToken: Address,
    startPrice: BigInt,
    reservePrice: BigInt,
    royaltyRecipient: Address,
    royaltyBasisPoints: i32,
    duration: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createAuction",
      "createAuction(address,uint256,uint8,uint256,address,uint256,uint256,address,uint16,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenContract),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tokenType)),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(saleToken),
        ethereum.Value.fromUnsignedBigInt(startPrice),
        ethereum.Value.fromUnsignedBigInt(reservePrice),
        ethereum.Value.fromAddress(royaltyRecipient),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(royaltyBasisPoints)),
        ethereum.Value.fromUnsignedBigInt(duration)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeBasisPoints(): i32 {
    let result = super.call("feeBasisPoints", "feeBasisPoints():(uint16)", []);

    return result[0].toI32();
  }

  try_feeBasisPoints(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "feeBasisPoints",
      "feeBasisPoints():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  feeRecipient(): Address {
    let result = super.call("feeRecipient", "feeRecipient():(address)", []);

    return result[0].toAddress();
  }

  try_feeRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeRecipient", "feeRecipient():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAuction(auctionId: BigInt): Bulbafloor__getAuctionResult {
    let result = super.call(
      "getAuction",
      "getAuction(uint256):((address,uint256,uint8),uint256,address,address,uint256,uint256,uint16,address,uint16,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(auctionId)]
    );

    return changetype<Bulbafloor__getAuctionResult>(
      new Bulbafloor__getAuctionResult(
        changetype<Bulbafloor__getAuctionResultTokenStruct>(
          result[0].toTuple()
        ),
        result[1].toBigInt(),
        result[2].toAddress(),
        result[3].toAddress(),
        result[4].toBigInt(),
        result[5].toBigInt(),
        result[6].toI32(),
        result[7].toAddress(),
        result[8].toI32(),
        result[9].toBigInt(),
        result[10].toBigInt()
      )
    );
  }

  try_getAuction(
    auctionId: BigInt
  ): ethereum.CallResult<Bulbafloor__getAuctionResult> {
    let result = super.tryCall(
      "getAuction",
      "getAuction(uint256):((address,uint256,uint8),uint256,address,address,uint256,uint256,uint16,address,uint16,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(auctionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Bulbafloor__getAuctionResult>(
        new Bulbafloor__getAuctionResult(
          changetype<Bulbafloor__getAuctionResultTokenStruct>(
            value[0].toTuple()
          ),
          value[1].toBigInt(),
          value[2].toAddress(),
          value[3].toAddress(),
          value[4].toBigInt(),
          value[5].toBigInt(),
          value[6].toI32(),
          value[7].toAddress(),
          value[8].toI32(),
          value[9].toBigInt(),
          value[10].toBigInt()
        )
      )
    );
  }

  getCurrentPrice(auctionId: BigInt): Bulbafloor__getCurrentPriceResult {
    let result = super.call(
      "getCurrentPrice",
      "getCurrentPrice(uint256):(address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(auctionId)]
    );

    return new Bulbafloor__getCurrentPriceResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_getCurrentPrice(
    auctionId: BigInt
  ): ethereum.CallResult<Bulbafloor__getCurrentPriceResult> {
    let result = super.tryCall(
      "getCurrentPrice",
      "getCurrentPrice(uint256):(address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(auctionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Bulbafloor__getCurrentPriceResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  nextAuctionId(): BigInt {
    let result = super.call("nextAuctionId", "nextAuctionId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextAuctionId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextAuctionId",
      "nextAuctionId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get initialOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _feeBasisPoints(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _feeRecipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyCall extends ethereum.Call {
  get inputs(): BuyCall__Inputs {
    return new BuyCall__Inputs(this);
  }

  get outputs(): BuyCall__Outputs {
    return new BuyCall__Outputs(this);
  }
}

export class BuyCall__Inputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuyCall__Outputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }
}

export class CancelAuctionCall extends ethereum.Call {
  get inputs(): CancelAuctionCall__Inputs {
    return new CancelAuctionCall__Inputs(this);
  }

  get outputs(): CancelAuctionCall__Outputs {
    return new CancelAuctionCall__Outputs(this);
  }
}

export class CancelAuctionCall__Inputs {
  _call: CancelAuctionCall;

  constructor(call: CancelAuctionCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelAuctionCall__Outputs {
  _call: CancelAuctionCall;

  constructor(call: CancelAuctionCall) {
    this._call = call;
  }
}

export class CreateAuctionCall extends ethereum.Call {
  get inputs(): CreateAuctionCall__Inputs {
    return new CreateAuctionCall__Inputs(this);
  }

  get outputs(): CreateAuctionCall__Outputs {
    return new CreateAuctionCall__Outputs(this);
  }
}

export class CreateAuctionCall__Inputs {
  _call: CreateAuctionCall;

  constructor(call: CreateAuctionCall) {
    this._call = call;
  }

  get tokenContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokenType(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get saleToken(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get startPrice(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get reservePrice(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get royaltyRecipient(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get royaltyBasisPoints(): i32 {
    return this._call.inputValues[8].value.toI32();
  }

  get duration(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }
}

export class CreateAuctionCall__Outputs {
  _call: CreateAuctionCall;

  constructor(call: CreateAuctionCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get initialOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _feeBasisPoints(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _feeRecipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RecoverERC1155tokensCall extends ethereum.Call {
  get inputs(): RecoverERC1155tokensCall__Inputs {
    return new RecoverERC1155tokensCall__Inputs(this);
  }

  get outputs(): RecoverERC1155tokensCall__Outputs {
    return new RecoverERC1155tokensCall__Outputs(this);
  }
}

export class RecoverERC1155tokensCall__Inputs {
  _call: RecoverERC1155tokensCall;

  constructor(call: RecoverERC1155tokensCall) {
    this._call = call;
  }

  get tokenContracts(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class RecoverERC1155tokensCall__Outputs {
  _call: RecoverERC1155tokensCall;

  constructor(call: RecoverERC1155tokensCall) {
    this._call = call;
  }
}

export class RecoverERC20tokensCall extends ethereum.Call {
  get inputs(): RecoverERC20tokensCall__Inputs {
    return new RecoverERC20tokensCall__Inputs(this);
  }

  get outputs(): RecoverERC20tokensCall__Outputs {
    return new RecoverERC20tokensCall__Outputs(this);
  }
}

export class RecoverERC20tokensCall__Inputs {
  _call: RecoverERC20tokensCall;

  constructor(call: RecoverERC20tokensCall) {
    this._call = call;
  }

  get tokenContracts(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class RecoverERC20tokensCall__Outputs {
  _call: RecoverERC20tokensCall;

  constructor(call: RecoverERC20tokensCall) {
    this._call = call;
  }
}

export class RecoverERC721tokensCall extends ethereum.Call {
  get inputs(): RecoverERC721tokensCall__Inputs {
    return new RecoverERC721tokensCall__Inputs(this);
  }

  get outputs(): RecoverERC721tokensCall__Outputs {
    return new RecoverERC721tokensCall__Outputs(this);
  }
}

export class RecoverERC721tokensCall__Inputs {
  _call: RecoverERC721tokensCall;

  constructor(call: RecoverERC721tokensCall) {
    this._call = call;
  }

  get tokenContracts(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class RecoverERC721tokensCall__Outputs {
  _call: RecoverERC721tokensCall;

  constructor(call: RecoverERC721tokensCall) {
    this._call = call;
  }
}

export class RecoverNativeTokensCall extends ethereum.Call {
  get inputs(): RecoverNativeTokensCall__Inputs {
    return new RecoverNativeTokensCall__Inputs(this);
  }

  get outputs(): RecoverNativeTokensCall__Outputs {
    return new RecoverNativeTokensCall__Outputs(this);
  }
}

export class RecoverNativeTokensCall__Inputs {
  _call: RecoverNativeTokensCall;

  constructor(call: RecoverNativeTokensCall) {
    this._call = call;
  }
}

export class RecoverNativeTokensCall__Outputs {
  _call: RecoverNativeTokensCall;

  constructor(call: RecoverNativeTokensCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetFeeBasisPointsCall extends ethereum.Call {
  get inputs(): SetFeeBasisPointsCall__Inputs {
    return new SetFeeBasisPointsCall__Inputs(this);
  }

  get outputs(): SetFeeBasisPointsCall__Outputs {
    return new SetFeeBasisPointsCall__Outputs(this);
  }
}

export class SetFeeBasisPointsCall__Inputs {
  _call: SetFeeBasisPointsCall;

  constructor(call: SetFeeBasisPointsCall) {
    this._call = call;
  }

  get _feeBasisPoints(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetFeeBasisPointsCall__Outputs {
  _call: SetFeeBasisPointsCall;

  constructor(call: SetFeeBasisPointsCall) {
    this._call = call;
  }
}

export class SetFeeRecipientCall extends ethereum.Call {
  get inputs(): SetFeeRecipientCall__Inputs {
    return new SetFeeRecipientCall__Inputs(this);
  }

  get outputs(): SetFeeRecipientCall__Outputs {
    return new SetFeeRecipientCall__Outputs(this);
  }
}

export class SetFeeRecipientCall__Inputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }

  get _feeRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeRecipientCall__Outputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
